name: Continuous Deployment (CD)

on:
  workflow_run:
    workflows: ["Continuous Integration (CI)"]
    # Execute the workflow once the CI workflow is completed on main branch.
    types: [completed]
    branches: [ "master" ]

env:
  AWS_REGION: us-east-1                             # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: impesud                           # set this to your Amazon ECR repository name
  ECS_SERVICE: impesud-service-1                    # set this to your Amazon ECS service name
  ECS_CLUSTER: impesud-cluster                      # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/impesud-revision1.json  # set this to the path to your Amazon ECS task definition
                                                    # file, e.g. .aws/impesud-revision1.json
  CONTAINER_NAME: rem                               # set this to the name of the container in the
                                                    # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
          registry-type: public

    - name: Build, tag, and push image to Amazon ECR Public
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        ECR_REGISTRY_ALIAS: l7v3h1w3
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker compose up -d
        docker image tag react-express-mysql-backend:latest  $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:backend_latest
        docker image push $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:backend_latest
        echo "image-backend=$ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:backend_latest" >> $GITHUB_OUTPUT
        docker image tag react-express-mysql-frontend:latest  $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:frontend_latest
        docker image push $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:frontend_latest
        echo "image-frontend=$ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:frontend_latest" >> $GITHUB_OUTPUT
        docker compose down

    - name: Fill in the new first image ID in the Amazon ECS task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image-backend }}

    - name: Deploy first Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    - name: Fill in the new second image ID in the Amazon ECS task definition
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image-frontend }}

    - name: Deploy second Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true